# Demo 5: Complex Workflow - Multi-Backend Pipeline
# This demonstrates advanced DAG with multiple backends and execution strategies

strategy: level  # Use level-by-level execution for comparison
failure_strategy: best_effort

executor_options:
  max_concurrency: 6

processors:
  # Entry points: multiple input processors
  - id: input_a
    backend: local
    impl: change_text_case_upper
    depends_on: []
    options: {}

  - id: input_b
    backend: local
    impl: change_text_case_lower
    depends_on: []
    options: {}

  # Processing layer: mix of local and WASM
  - id: process_a
    backend: local
    impl: reverse_text
    depends_on: [input_a]
    options: {}

  - id: process_b_wasm
    backend: wasm
    module: wasm_modules/hello_world.wasm
    depends_on: [input_b]
    options:
      intent: transform

  # Analysis layer: parallel analysis of both paths
  - id: analyze_a
    backend: local
    impl: token_counter
    depends_on: [process_a]
    options:
      count_type: "characters"

  - id: analyze_b
    backend: local
    impl: word_frequency_analyzer
    depends_on: [process_b_wasm]
    options: {}

  # Convergence: combine all results
  - id: final_merge
    backend: local
    impl: prefix_suffix_adder
    depends_on: [analyze_a, analyze_b]
    options:
      prefix: "ðŸ”„ Multi-Backend Result: "
      suffix: " [COMPLETE]"
