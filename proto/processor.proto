syntax = "proto3";

package processor.v1;

// Request envelope for processors
message ProcessorRequest {
  bytes payload = 1;                  // opaque data (engine-defined)
  map<string, string> metadata = 2;   // tracing, auth, schema version, etc.
}

// Structured error for uniform handling
message ErrorDetail {
  int32 code = 1;                     // app-specific error code
  string message = 2;                 // human-readable description
}

// Processor intent declaration for safe parallelism
enum ProcessorIntent {
  TRANSFORM = 0;  // Modifies payload, may modify metadata
  ANALYZE = 1;    // Payload pass-through, may add metadata
}

// Response envelope for processors
message ProcessorResponse {
  oneof outcome {
    bytes next_payload = 1;           // success result
    ErrorDetail error = 2;            // error result
  }
  map<string, string> metadata = 3;     // Metadata for chaining and enrichment
  ProcessorIntent declared_intent = 4;  // Declared intent for validation
}

// Canonical processor service definition
service Processor {
  rpc Process(ProcessorRequest) returns (ProcessorResponse);
}
