#!/bin/bash
# Copyright (c) 2025 Steve Wagner (ciroque@live.com)
# SPDX-License-Identifier: MIT

# WIT Dependency Setup Script for DAGwood Components
# Usage: ./scripts/setup-wit-deps.sh <component-name> [wit-version]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
WIT_DIR="$PROJECT_ROOT/wit"

# Default to latest version if not specified
WIT_VERSION="${2:-v1.0.0}"
COMPONENT_NAME="$1"

if [[ -z "$COMPONENT_NAME" ]]; then
    echo "‚ùå Usage: $0 <component-name> [wit-version]"
    echo ""
    echo "üìã Available WIT versions:"
    ls -1 "$WIT_DIR/versions/" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V
    echo ""
    echo "üì¶ Example: $0 my_processor v1.0.0"
    exit 1
fi

COMPONENT_DIR="$PROJECT_ROOT/wasm_components/$COMPONENT_NAME"
WIT_SOURCE="$WIT_DIR/versions/$WIT_VERSION/dagwood-processor.wit"

echo "üîß Setting up WIT dependencies for component: $COMPONENT_NAME"
echo "üìÅ Component directory: $COMPONENT_DIR"
echo "üìÑ WIT version: $WIT_VERSION"

# Validate WIT version exists
if [[ ! -f "$WIT_SOURCE" ]]; then
    echo "‚ùå WIT version $WIT_VERSION not found at: $WIT_SOURCE"
    echo ""
    echo "üìã Available versions:"
    ls -1 "$WIT_DIR/versions/" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V
    exit 1
fi

# Create component directory if it doesn't exist
if [[ ! -d "$COMPONENT_DIR" ]]; then
    echo "üìÅ Creating component directory: $COMPONENT_DIR"
    mkdir -p "$COMPONENT_DIR/src"
    
    # Create basic Cargo.toml
    cat > "$COMPONENT_DIR/Cargo.toml" << EOF
[package]
name = "$COMPONENT_NAME"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
wit-bindgen = "0.30"

[profile.release]
opt-level = "s"
lto = true
panic = "abort"
EOF
    
    echo "‚úÖ Created basic Cargo.toml"
fi

# Create wit directory and copy WIT file
echo "üìã Setting up WIT interface..."
mkdir -p "$COMPONENT_DIR/wit"
cp "$WIT_SOURCE" "$COMPONENT_DIR/wit/"

# Create wit-deps.toml for the component
cat > "$COMPONENT_DIR/wit-deps.toml" << EOF
# WIT Dependencies for $COMPONENT_NAME
# Generated by setup-wit-deps.sh

[dependencies]
dagwood-processor = { path = "wit/dagwood-processor.wit" }

[metadata]
component-name = "$COMPONENT_NAME"
wit-version = "$WIT_VERSION"
generated-date = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"

[compatibility]
dagwood-runtime = ">= 0.1.0"
wit-bindgen = ">= 0.30"
EOF

# Create basic lib.rs template if it doesn't exist
if [[ ! -f "$COMPONENT_DIR/src/lib.rs" ]]; then
    cat > "$COMPONENT_DIR/src/lib.rs" << 'EOF'
// Generated DAGwood WASM Component Template
// Replace this with your actual implementation

wit_bindgen::generate!({
    world: "dagwood-component",
    path: "wit",
});

use exports::dagwood::component::processor::{
    Guest, AllocationError, ProcessingError
};

struct Component;

impl Guest for Component {
    fn process(input_ptr: u32, input_len: u64, output_len_ptr: u32) -> Result<u32, ProcessingError> {
        // TODO: Implement your processing logic here
        Err(ProcessingError::ProcessingFailed("Not implemented".to_string()))
    }
    
    fn allocate(size: u64) -> Result<u32, AllocationError> {
        if size == 0 || size > 10_000_000 {
            return Err(AllocationError::InvalidSize(size));
        }
        
        let mut vec = Vec::with_capacity(size as usize);
        vec.resize(size as usize, 0);
        let ptr = vec.as_mut_ptr();
        std::mem::forget(vec);
        Ok(ptr as u32)
    }
    
    fn deallocate(ptr: u32, size: u64) {
        if ptr != 0 && size > 0 {
            unsafe {
                let _ = Vec::from_raw_parts(ptr as *mut u8, size as usize, size as usize);
            }
        }
    }
}

export!(Component);
EOF
    echo "‚úÖ Created template lib.rs"
fi

# Create build script
cat > "$COMPONENT_DIR/build.sh" << 'EOF'
#!/bin/bash
set -e

echo "üî® Building WASM component..."

if ! rustup target list --installed | grep -q "wasm32-unknown-unknown"; then
    echo "üì• Installing wasm32-unknown-unknown target..."
    rustup target add wasm32-unknown-unknown
fi

cargo build --target wasm32-unknown-unknown --release

CRATE_NAME=$(grep '^name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
cp "target/wasm32-unknown-unknown/release/${CRATE_NAME}.wasm" "../${CRATE_NAME}.wasm"

WASM_SIZE=$(stat -c%s "../${CRATE_NAME}.wasm")
echo "‚úÖ Build complete! ${CRATE_NAME}.wasm size: ${WASM_SIZE} bytes"
EOF

chmod +x "$COMPONENT_DIR/build.sh"
echo "‚úÖ Created build script"

echo ""
echo "üéâ WIT dependencies setup complete!"
echo ""
echo "üìã Next steps:"
echo "  1. cd wasm_components/$COMPONENT_NAME"
echo "  2. Edit src/lib.rs to implement your processor logic"
echo "  3. Run ./build.sh to build the WASM component"
echo "  4. Add component to DAGwood configuration"
echo ""
echo "üìÑ Files created:"
echo "  - wit/dagwood-processor.wit (WIT interface)"
echo "  - wit-deps.toml (dependency configuration)"
echo "  - src/lib.rs (component template)"
echo "  - build.sh (build script)"
echo ""
echo "üîó WIT version: $WIT_VERSION"
echo "üìö Documentation: wit/versions/VERSIONS.md"
