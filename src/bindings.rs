// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod dagwood {
        pub mod component {
            /// WASM Component Model interface for data processing
            ///
            /// This interface defines the contract for WASM components that process
            /// data within DAGwood pipelines. Components are simple, stateless
            /// processors that transform input data to output data.
            ///
            /// ## Component Model Advantages
            ///
            /// This uses the modern Component Model interface with automatic memory management:
            /// - No manual allocate/deallocate functions needed
            /// - wit-bindgen handles all memory transfer automatically
            /// - Type-safe with proper error handling
            /// - Clean, simple API for component implementors
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod processing_node {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Data processing errors
                #[derive(Clone)]
                pub enum ProcessingError {
                    /// Invalid input data (malformed UTF-8, wrong format, etc.)
                    InvalidInput(_rt::String),
                    /// Processing logic failed (algorithm error, computation failure)
                    ProcessingFailed(_rt::String),
                    /// Input too large for component to handle
                    InputTooLarge(u64),
                }
                impl ::core::fmt::Debug for ProcessingError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ProcessingError::InvalidInput(e) => {
                                f.debug_tuple("ProcessingError::InvalidInput")
                                    .field(e)
                                    .finish()
                            }
                            ProcessingError::ProcessingFailed(e) => {
                                f.debug_tuple("ProcessingError::ProcessingFailed")
                                    .field(e)
                                    .finish()
                            }
                            ProcessingError::InputTooLarge(e) => {
                                f.debug_tuple("ProcessingError::InputTooLarge")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for ProcessingError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for ProcessingError {}
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_process_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::process(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr2.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                ProcessingError::InvalidInput(e) => {
                                    *ptr2.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                ProcessingError::ProcessingFailed(e) => {
                                    *ptr2.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                ProcessingError::InputTooLarge(e) => {
                                    *ptr2.add(8).cast::<u8>() = (2i32) as u8;
                                    *ptr2.add(16).cast::<i64>() = _rt::as_i64(e);
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_process<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = i32::from(*arg0.add(8).cast::<u8>());
                            match l4 {
                                0 => {
                                    let l5 = *arg0.add(16).cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                                1 => {
                                    let l7 = *arg0.add(16).cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Main data processing function
                    ///
                    /// Processes input bytes and returns output bytes.
                    /// wit-bindgen automatically handles memory allocation and transfer.
                    ///
                    /// ## Parameters:
                    /// - `input`: Input data as a byte list
                    ///
                    /// ## Returns:
                    /// - `ok`: Output data as a byte list
                    /// - `err`: Processing error with details
                    ///
                    /// ## Memory Management:
                    /// Completely handled by wit-bindgen! No manual memory management required.
                    /// The canonical ABI transfers data between host and component automatically.
                    ///
                    /// ## Example Implementation (Rust):
                    /// ```rust
                    /// fn process(input: Vec<u8>) -> Result<Vec<u8>, ProcessingError> {
                    ///     // Your processing logic here
                    ///     Ok(output)
                    /// }
                    /// ```
                    ///
                    /// ## Example Implementation (JavaScript/ComponentizeJS):
                    /// ```javascript
                    /// export function process(input) {
                    ///     // Your processing logic here
                    ///     return output;
                    /// }
                    /// ```
                    fn process(
                        input: _rt::Vec<u8>,
                    ) -> Result<_rt::Vec<u8>, ProcessingError>;
                }
                #[doc(hidden)]
                macro_rules! __export_dagwood_component_processing_node_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "dagwood:component/processing-node@1.0.0#process")] unsafe extern
                        "C" fn export_process(arg0 : * mut u8, arg1 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*:: _export_process_cabi::<$ty >
                        (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_dagwood:component/processing-node@1.0.0#process")]
                        unsafe extern "C" fn _post_return_process(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_process::<$ty >
                        (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_dagwood_component_processing_node_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 16 + 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 16
                        + 2 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_dagwood_component_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::dagwood::component::processing_node::__export_dagwood_component_processing_node_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::dagwood::component::processing_node);
    };
}
#[doc(inline)]
pub(crate) use __export_dagwood_component_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:dagwood:component@1.0.0:dagwood-component:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 350] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd6\x01\x01A\x02\x01\
A\x02\x01B\x06\x01q\x03\x0dinvalid-input\x01s\0\x11processing-failed\x01s\0\x0fi\
nput-too-large\x01w\0\x04\0\x10processing-error\x03\0\0\x01p}\x01j\x01\x02\x01\x01\
\x01@\x01\x05input\x02\0\x03\x04\0\x07process\x01\x04\x04\0'dagwood:component/pr\
ocessing-node@1.0.0\x05\0\x04\0)dagwood:component/dagwood-component@1.0.0\x04\0\x0b\
\x17\x01\0\x11dagwood-component\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
