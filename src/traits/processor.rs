use async_trait::async_trait;
use std::collections::HashMap;

use crate::proto::processor_v1::{ProcessorRequest, ProcessorResponse};
use crate::utils::metadata::merge_metadata_with_prefixes;

/// Processor intent declaration for safe parallelism
/// This enum is separate from protobuf and used only in Rust trait methods
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ProcessorIntent {
    /// Modifies payload, may modify metadata - must run sequentially
    Transform,
    /// Payload pass-through, may add metadata - can run in parallel
    Analyze,
}

/// Enhanced Processor trait as defined in ADR-13 (supersedes parts of ADR-12):
/// - Intent declaration (Transform vs Analyze)
/// - Metadata propagation and handling
/// - Backward compatibility with existing processors (see ADR-12 for legacy details)
#[async_trait]
pub trait Processor: Send + Sync {
    /// Process the input request and return a response
    async fn process(&self, req: ProcessorRequest) -> ProcessorResponse;

    /// Return the processor's name/identifier
    fn name(&self) -> &'static str;

    /// Declare the processor's intent (Transform or Analyze)
    /// 
    /// This method allows processors to declare their execution intent,
    /// which enables the executor to make informed decisions about:
    /// - Execution ordering (sequential for Transform, parallel for Analyze)
    /// - Result collection strategies
    /// - Metadata propagation rules
    /// 
    /// Default implementation returns Transform for backward compatibility.
    fn declared_intent(&self) -> ProcessorIntent {
        ProcessorIntent::Transform
    }

    /// Handle metadata propagation from dependencies
    /// 
    /// This method allows processors to customize how they handle metadata
    /// from their dependencies. The default implementation merges all
    /// dependency metadata into the processor's output metadata.
    /// 
    /// # Arguments
    /// * `dependency_metadata` - Metadata from all dependency processors
    /// * `own_metadata` - Metadata generated by this processor
    /// 
    /// # Returns
    /// Combined metadata to include in the ProcessorResponse
    fn merge_metadata(
        &self,
        dependency_metadata: &HashMap<String, HashMap<String, String>>,
        own_metadata: HashMap<String, String>,
    ) -> HashMap<String, String> {
        merge_metadata_with_prefixes(own_metadata, dependency_metadata)
    }

    /// Validate that the processor's runtime behavior matches its declared intent
    /// 
    /// This method can be overridden by processors that want to perform
    /// runtime validation of their intent declaration. The default
    /// implementation always returns true (no validation).
    /// 
    /// # Arguments
    /// * `request` - The input request
    /// * `response` - The generated response
    /// 
    /// # Returns
    /// True if the processor's behavior matches its declared intent
    fn validate_intent(&self, _request: &ProcessorRequest, _response: &ProcessorResponse) -> bool {
        true // Default: no validation
    }
}
