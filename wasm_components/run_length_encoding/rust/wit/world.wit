// Copyright (c) 2025 Steve Wagner (ciroque@live.com)
// SPDX-License-Identifier: MIT

/// Extended WIT for DAGwood WASM Component with WASI Support
///
/// This WIT file extends the `dagwood:component@1.0.0` package to include
/// minimal WASI interfaces required for proper execution in a Wasmtime host.
/// It maintains the sandboxing and security model of the original while
/// ensuring compatibility with dynamic memory allocation needs (e.g., cabi_realloc).
///
/// ## Purpose
///
/// The original dagwood-component world avoids WASI imports for maximum sandboxing.
/// However, components using dynamic types (list<u8>) require memory allocation
/// support, which may fail in Wasmtime without explicit WASI interfaces.
/// This WIT file adds `wasi:cli/environment` to provide minimal environment access.
///
/// ## Architecture
///
/// ```
/// DAGwood Runtime
///       ↓
/// WasmProcessor (Rust) ← implements Processor trait
///       ↓
/// WitNodeExecutor ← uses wit-bindgen generated bindings
///       ↓
/// WASM Component ← exports process(list<u8>) -> result<list<u8>, processing-error>
///                ← imports wasi:cli/environment for memory allocation
/// ```
///

package dagwood:rle-component@1.0.0;

use dagwood:component/processing-node@1.0.0;

/// RLE Component world for WASI Preview 2
/// 
/// This world exports the DAGwood processing interface.
/// Memory management (cabi_realloc) is automatically provided by the
/// wasm32-wasip2 target toolchain - no explicit import needed.
world rle-component {
    /// Export the processing-node interface (implements the DAGwood component contract)
    export processing-node;
}
